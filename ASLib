#!/sbin/sh
#
#	General Auto Script Library (ASLib)
#
#	CODR: Christian Arvin Catajoy Cabo
#	CODE: C.A.ASLib
#
#	Description:
#
#	 A collection set of functions used in recovery and upgrade structure design
#   for custom recoveries (e.g. TWRP) and ROM OS's (e.g. Lineage OS).
#	1.)If you are going to use my script please do not remove this header.
#	2.)You can use it freely as much as you want.
#	3.)You are allowed to modify this script.
#	4.)If modification has caused the whole script to be unrecognizably different
#	   from my original script, just reference me and this script on the header.
#
#	Info
#		
#
#	Global Folder and File Structures
#	
#	ASLib 				- This Script (dependent on ASLib_logmsg and ASLib_ui_print)
#	ASLib_ui_print		- ui_print module (important)
#	ASLib_logmsg		- logMsg (important)
#
#	Global Export Variables
#	ASLib_ver
#


# Global Variables												#
#---------------------------------------------------------------#
# ASLib Version
export ASLib_ver=1007

# Load sub-modules of ASLib
if [ ! -z "$LIBS" ];then
	for MODULES in `ls $LIBS | grep ASLib*`; do
		if [ "$MODULES" != "ASLib" ]; then
			. $LIBS/$MODULES
		fi
	done
elif [ -e /data/ASLib ];then
	for MODULES in `ls /data/ASLib | grep ASLib*`; do
		if [ "$MODULES" != "ASLib" ]; then
			. /data/$MODULES
		fi
	done
else
	echo "ASLib Itegrity Error Missing ASLib Modules, is everything alright?"
fi


# Functions
#	ex_s()
#	progress()
#	set_progress()
#	is_mounted()
#	set_perm()
#	cp_perm
#	ch_con
#	ln_con
#	toolbox_mount
#	remount_mountpoint
#	wipe_files
#	getvar
#	installfile
#

#ui title
# Displays The Title header stored in TMH(x)
# Careful init.fd must be called first before using this function
ui_title(){
$LT2 "ui_tittle started"
local set
while true;do
	set=$(($set+1))
	eval val='$'TH${set}
	if [ ! -z "$val" ];then
		ui_print "$val"
	else
		break
	fi
done
}

# Exit Script with Message
ex_s(){
	ui_print "Error: $@"
	exit 1
}

# Progress
# - Print progress to pipe
# $OUTFD must be defined.
#
progress() {
  if [ $OUTFD != "" ]; then
    echo "progress ${1} ${2} " 1>&$OUTFD;
	# LogTag
	$LT3 "progress set to $*"
  fi;
}
set_progress() {
  if [ $OUTFD != "" ]; then
    echo "set_progress ${1} " 1>&$OUTFD;
	# LogTag
	$LT3 "progress set to $*"
  fi;
}

# is Mounted?
# - Check's if mountpoint is mounted.
#
# Usage
# - is_mounted input1 input2
# - input1 -> /mount_point "/system or sdcard"
# - input2 -> read-write status "rw or ro"
# - returns value
#
is_mounted() {
	$LT2 "is_mounted $*"
	if [ ! -z "$2" ]; then
		cat /proc/mounts | grep $1 | grep $2,
	else
		cat /proc/mounts | grep $1
	fi
	return $?
}

# Set Permission
# - Set's up permission
#
# - set_perm	input1 input2 input3 input4 input 5
#   input1		-> chown user	!--important--!
#   input2		-> chown group	!--important--!
#   input3		-> chmod setup	!--important--!
#   input4		-> targer_file	!--important--!
#   input5		->
#
# - Sub Functions
#   ch_con		input4
#   ch_con_ext	input4 input5
set_perm() {
	$LT2 "set_perm $1, $2, $3, $4, $5"
	if [ -z "$1" ] && [ -z "$2" ] && [ -z "$3" ] && [ -z "$4" ];then
		$LT3 "not performing set_perm incomplete input"
		$LT3 "set_perm -$1, -$2, -$3, -$4"
	else
		chown $1.$2 $4	2>&1 | $LT4
		chown $1:$2 $4	2>&1 | $LT4
		chmod $3 $4		2>&1 | $LT4
	fi
	if [ -z "$4" ];then
		$LT3 "not performing chcon missing input"
	else
		ch_con $4
		if [ ! -z "$5" ];then
			ch_con_ext $4 $5
		fi
	fi
}
# copy permission
cp_perm() {
	$LT2 "cp_perm $1, $2, $3, $4, $5, $6"
	rm $5 2>&1 | $LT4
	if [ -f "$4" ]; then
	cat $4 > $5
	set_perm $1 $2 $3 $5 $6
	fi
}

# Wipe Files
# - wipe files recursively or specifically
#
# - wipe_files	input1 input2
# - input1 		-> $data_file		!--Important--!
# - input2		-> fancy message
#
wipe_files() {
	# Added 08:43 08/05/2017
	# wipe_files is intended for /system wipe. usage for explicit file is not encourage
	# it will be inefficient use rm -f instead, but we will still handle explicit call.
	$LT2 "wipe_files $*"
	local FILE_DIR
	local STATUS=true
	# let's handle multiple inputs
	for TARGET in $*;do
		$LT3 "processing $TARGET"
		# Determine if used as explicit
		if [ -e $TARGET ];then
			# the location is explicit
			$LT3 "$TARGET is explicit"
			FILE_DIR=$TARGET
		elif [ -e /system/$TARGET ];then 
			# let's assume its not explicit
			$LT3 "target is system wipe"
			FILE_DIR=/system/$TARGET
		else
			$LT3 "ERROR $TARGET does not exist"
			STATUS=false
		fi
		# Let's begin
		if ($STATUS);then
			if [ -d $FILE_DIR ];then
				for FILE in `ls $FILE_DIR`;do
					$LT3 "removing $FILE_DIR/$FILE"
					rm -rf "$FILE_DIR/$FILE" 2>&1 | $LT4
					# lets check if the file was deleted succesfully
					wipe_file_check "$FILE_DIR/$FILE"
				done
				$LT3 "removing $FILE_DIR"
				rm -rf $FILE_DIR 2>&1 | $LT4
				wipe_file_check "$FILE_DIR"
			else 
				$LT3 "removing $FILE_DIR"
				rm -f "$FILE" 2>&1 | $LT4
				# lets check if the file was deleted succesfully
				wipe_file_check "$FILE_DIR"
			fi
		fi
	done
}

wipe_file_check(){
	$LT3 "checking file status: $*"
	if [ -e "$*" ];then
		$LT3 "$* was failed to be removed"
	else
		$LT3 "$* was removed"
	fi
}


# change con
ch_con() {
	$LT2 "ch_con $*"
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toybox chcon -h u:object_r:system_file:s0 $1 	2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/toolbox chcon -h u:object_r:system_file:s0 $1 		2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toolbox chcon -h u:object_r:system_file:s0 $1 	2>&1 | $LT4
	chcon -h u:object_r:system_file:s0 $1
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toybox chcon u:object_r:system_file:s0 $1 		2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/toolbox chcon u:object_r:system_file:s0 $1 			2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toolbox chcon u:object_r:system_file:s0 $1 		2>&1 | $LT4
	chcon u:object_r:system_file:s0 $1 														2>&1 | $LT4
}
ch_con_ext() { # sub-function of set_perm
	$LT3 "ch_con_ext $*"
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toybox chcon $2 $1 								2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/toolbox chcon $2 $1 									2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toolbox chcon $2 								2>&1 | $LT4
	chcon $2 $1 																			2>&1 | $LT4
}

# Link Con
ln_con() {
	$LT2 "ln_con $*"
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toybox ln -s $1 $2 2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/toolbox ln -s $1 $2 2>&1 | $LT4
	LD_LIBRARY_PATH=$SYSTEMLIB /system/bin/toolbox ln -s $1 $2 2>&1 | $LT4
	ln -s $1 $2 2>&1 | $LT4
	ch_con $2
}

# Toolbox Mount Method
toolbox_mount() {
	$LT2 "toolbox_mount $*"
	RW=rw
	if [ ! -z "$2" ]; then
	RW=$2
	fi

	DEV=
	POINT=
	FS=
	for i in `cat /etc/fstab | grep "$1"`; do
		if [ -z "$DEV" ]; then
			DEV=$i
		elif [ -z "$POINT" ]; then
			POINT=$i
		elif [ -z "$FS" ]; then
			  FS=$i
			break
		fi
	done
	if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT 					2>&1 | $LT4; fi
	if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT 			2>&1 | $LT4; fi

	DEV=
	POINT=
	FS=
	for i in `cat /etc/recovery.fstab | grep "$1"`; do
		if [ -z "$POINT" ]; then
			POINT=$i
		elif [ -z "$FS" ]; then
			FS=$i
		elif [ -z "$DEV" ]; then
			DEV=$i
			break
		fi
	done
	if [ "$FS" = "emmc" ]; then
		if (! is_mounted $1 $RW); then mount -t ext4 -o $RW $DEV $POINT 			2>&1 | $LT4; fi
		if (! is_mounted $1 $RW); then mount -t ext4 -o $RW,remount $DEV $POINT 	2>&1 | $LT4; fi
		if (! is_mounted $1 $RW); then mount -t f2fs -o $RW $DEV $POINT 			2>&1 | $LT4; fi
		if (! is_mounted $1 $RW); then mount -t f2fs -o $RW,remount $DEV $POINT 	2>&1 | $LT4; fi
	else
		if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT 				2>&1 | $LT4; fi
		if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT 		2>&1 | $LT4; fi
	fi
}

# Remount as Read-Write
# - Remount a mount_point
#
# - remount_rw /input1
# - input1 -> target mount_point "/system etc." 
#
remount_mountpoint() {
	$LT2 "remount_mountpoint $1, $2"
	if [ -n "$*" ];then
		if (! is_mounted $1 $2); then mount -o $2,remount $1 		2>&1 | $LT4; fi
		if (! is_mounted $1 $2); then mount -o $2,remount $1 $1 	2>&1 | $LT4; fi
		if (! is_mounted $1 $2); then toolbox_mount $1 				2>&1 | $LT4; fi
		if (! is_mounted $1 $2); then status=1;else status=0;fi
		return $status
	fi
}

# Get Variables
getvar() {
	$LT2 "getvar $1"
	local VARNAME=$1
	local VALUE=$(eval echo \$"$VARNAME");
	for FILE in /data/.supersu /cache/.supersu /system/.supersu; do
	if [ -z "$VALUE" ]; then
	  LINE=$(cat $FILE 2>/dev/null | grep "$VARNAME=")
	  if [ ! -z "$LINE" ]; then
		VALUE=${LINE#*=}
	  fi
	fi
	done
	eval $VARNAME=\$VALUE
}

# 'readlink -f' is not reliable across devices/recoveries, this works for our case
resolve_link() {
	$LT2 "resolve_link $1"
	local RESOLVE=$1
	local RESOLVED=
	while (true); do
		RESOLVED=$(readlink $RESOLVE || echo $RESOLVE)
		if [ "$RESOLVE" = "$RESOLVED" ]; then
		  echo $RESOLVE
		  break
		else
		  RESOLVE=$RESOLVED
		fi
	done
}


# Functions SU-Exclusive										#
#---------------------------------------------------------------#
# SuperSU installer ZIP
# Copyright (c) 2012-2017 - Chainfire, CCMT
#
# ----- GENERIC INFO ------
#
# The following su binary versions are included in the full package. Each
# should be installed only if the system has the same or newer API level
# as listed. The script may fall back to a different binary on older API
# levels. supolicy are all ndk/pie/19+ for 32 bit, ndk/pie/20+ for 64 bit.
#
# binary        ARCH/path   build type      API
#
# arm-v5te      arm         ndk non-pie     7+
# x86           x86         ndk non-pie     7+
#
# x86           x86         ndk pie         17+   (su.pie, naming exception)
# arm-v7a       armv7       ndk pie         17+
# mips          mips        ndk pie         17+
#
# arm64-v8a     arm64       ndk pie         20+
# mips64        mips64      ndk pie         20+
# x86_64        x64         ndk pie         20+
#
# Non-static binaries are supported to be PIE (Position Independent
# Executable) from API level 16, and required from API level 20 (which will
# refuse to execute non-static non-PIE).
#
# The script performs several actions in various ways, sometimes
# multiple times, due to different recoveries and firmwares behaving
# differently, and it thus being required for the correct result.
#
# Overridable variables (shell):
#   BIN - Location of architecture specific files (native folder)
#   COM - Location of common files (APK folder)
#   LESSLOGGING - Reduce ui_print logging (true/false)
#   NOOVERRIDE - Do not read variables from /system/.supersu or
#                /data/.supersu
#
# Overridable variables (shell, /system/.supersu, /cache/.supersu,
# /data/.supersu):
#   SYSTEMLESS - Do a system-less install? (true/false, 6.0+ only)
#   PATCHBOOTIMAGE - Automatically patch boot image? (true/false,
#                    SYSTEMLESS only)
#   BOOTIMAGE - Boot image location (PATCHBOOTIMAGE only)
#   STOCKBOOTIMAGE - Stock boot image location (PATCHBOOTIMAGE only)
#   BINDSYSTEMXBIN - Poor man's overlay on /system/xbin (true/false,
#                    SYSTEMLESS only)
#   PERMISSIVE - Set sepolicy to fake-permissive (true/false, PATCHBOOTIMAGE
#                only)
#   KEEPVERITY - Do not remove dm-verity (true/false, PATCHBOOTIMAGE only)
#   KEEPFORCEENCRYPT - Do not replace forceencrypt with encryptable (true/
#                      false, PATCHBOOTIMAGE only)
#   REMOVEENCRYPTABLE - Remove the encryptable flag, needed on newer
#                       Samsung devices to disable forced encryption
#                       (true/false, PATCHBOOTIMAGE only)
#   FRP - Place files in boot image that allow root to survive a factory
#         reset (true/false, PATCHBOOTIMAGE only). Reverts to su binaries
#         from the time the ZIP was originall flashed, updates are lost.
# Shell overrides all, /data/.supersu overrides /cache/.supersu overrides
# /system/.supersu
#
# Note that if SELinux is set to enforcing, the daemonsu binary expects
# to be run at startup (usually from install-recovery.sh, 99SuperSUDaemon,
# app_process, or init.supersu.rc) from u:r:supersu:s0 (7.0+), u:r:init:s0 or
# u:r:kernel:s0 contexts. Depending on the current policies, it can also
# deal with u:r:init_shell:s0 and u:r:toolbox:s0 contexts. Any other context
# will lead to issues eventually.
#
# ----- "SYSTEM" INSTALL -----
#
# "System" install puts all the files needed in /system and does not need
# any boot image modifications. Default install method pre-Android-6.0
# (excluding Samsung-5.1).
#
# Even on Android-6.0+, the script attempts to detect if the current
# firmware is compatible with a system-only installation (see the
# "detect_systemless_required" function), and will prefer that
# (unless the SYSTEMLESS variable is set) if so. This will catch the
# case of several custom ROMs that users like to use custom boot images
# with - SuperSU will not need to patch these. It can also catch some
# locked bootloader cases that do allow security policy updates.
#
# To install SuperSU properly, aside from cleaning old versions and
# other superuser-type apps from the system, the following files need to
# be installed:
#
# API   source                        target                              chmod   chcon                       required
#
# 7-19  common/Superuser.apk          /system/app/Superuser.apk           0644    u:object_r:system_file:s0   gui
# 20+   common/Superuser.apk          /system/app/SuperSU/SuperSU.apk     0644    u:object_r:system_file:s0   gui
#
# 17+   common/install-recovery.sh    /system/etc/install-recovery.sh     0755    *1                          required
# 17+                                 /system/bin/install-recovery.sh     (symlink to /system/etc/...)        required
# *1: same as /system/bin/toolbox: u:object_r:system_file:s0 if API < 20, u:object_r:toolbox_exec:s0 if API >= 20
#
# 7+    ARCH/su *2                    /system/xbin/su                     *3      u:object_r:system_file:s0   required
# 7+                                  /system/bin/.ext/.su                *3      u:object_r:system_file:s0   gui
# 17+                                 /system/xbin/daemonsu               0755    u:object_r:system_file:s0   required
# *2: su.pie for 17+ x86(_32) only
# *3: 06755 if API < 18, 0755 if API >= 18
#
# 19+   ARCH/supolicy                 /system/xbin/supolicy               0755    u:object_r:system_file:s0   required
# 19+   ARCH/libsupol.so              /system/lib(64)/libsupol.so         0644    u:object_r:system_file:s0   required
#
# 21+   /system/bin/app_process32 *5  /system/bin/app_process32_original  0755    u:object_r:zygote_exec:s0   required
# 21+   /system/bin/app_process64 *5  /system/bin/app_process64_original  0755    u:object_r:zygote_exec:s0   required
# 21+   /system/bin/app_processXX *5  /system/bin/app_process_init        0755    u:object_r:system_file:s0   required
# 21+                                 /system/bin/app_process             (symlink to /system/xbin/daemonsu)  required
# 21+                             *5  /system/bin/app_process32           (symlink to /system/xbin/daemonsu)  required
# 21+                             *5  /system/bin/app_process64           (symlink to /system/xbin/daemonsu)  required
# *5: Only do this for the relevant bits. On a 64 bits system, leave the 32 bits files alone, or dynamic linker errors
#     will prevent the system from fully working in subtle ways. The bits of the su binary must also match!
#
# 17+   common/99SuperSUDaemon *6     /system/etc/init.d/99SuperSUDaemon  0755    u:object_r:system_file:s0   optional
# *6: only place this file if /system/etc/init.d is present
#
# 17+   'echo 1 >' or 'touch' *7      /system/etc/.installed_su_daemon    0644    u:object_r:system_file:s0   optional
# *7: the file just needs to exist or some recoveries will nag you. Even with it there, it may still happen.
#
# It may seem some files are installed multiple times needlessly, but
# it only seems that way. Installing files differently or symlinking
# instead of copying (unless specified) will lead to issues eventually.
#
# After installation, run '/system/xbin/su --install', which may need to
# perform some additional installation steps. Ideally, at one point,
# a lot of this script will be moved there.
#
# The included chattr(.pie) binaries are used to remove ext2's immutable
# flag on some files. This flag is no longer set by SuperSU's OTA
# survival since API level 18, so there is no need for the 64 bit versions.
# Note that chattr does not need to be installed to the system, it's just
# used by this script, and not supported by the busybox used in older
# recoveries.
#
# ----- "SYSTEM-LESS" INSTALL -----
#
# "System-less" install requires a modified boot image (the script can patch
# many boot images on-the-fly), but does not touch /system at all. Instead
# it keeps all the needed files in an image (/data/su.img) which is mounted
# to /su. Default install method on all Android-6.0+ and Samsung-5.1+
# devices.
#
# Note that even on 6.0+, system compatibility is checked. See the "SYSTEM"
# install section above.
#
# An ext4 image is created as /data/su.img, or /cache/su.img if /data could
# not be mounted. Similarly, the APK is placed as either /data/SuperSU.apk
# or /cache/SuperSU.apk. This is so we are not dependent on /data decryption
# working in recovery, which in the past has proved an issue on brand-new
# Android versions and devices.
#
# /sbin/launch_daemonsu.sh, which is added a service to init.rc, will mount
# the image at /su, and launch daemonsu from /su/bin/daemonsu. But before it
# does that, it will try to merge /data/su.img and /cache/su.img (leading),
# if both are present. It will also try to install the SuperSU APK.
#
# Files are expected at the following places (/su being the mountpoint of
# the ext4 image):
#
# API   source                        target                              chmod   chcon                       required
#
# 22+   common/Superuser.apk          /[data|cache]/SuperSU.apk           0644    u:object_r:system_file:s0   gui
#
# 22+   ARCH/su *1                    /su/bin/su                          0755    u:object_r:system_file:s0   required
# 22+                                 /su/bin/daemonsu                    0755    u:object_r:system_file:s0   required
# *1: su.pie for 17+ x86(_32) only
#
# 22+   ARCH/supolicy                 /su/bin/supolicy_wrapped            0755    u:object_r:system_file:s0   required
# 22+   /su/bin/su (symlink) *2       /su/bin/supolicy                    0755    u:object_r:system_file:s0   required
# 22+   ARCH/libsupol.so              /su/lib/libsupol.so                 0644    u:object_r:system_file:s0   required
# *2: when called this way, su sets the correct LD_LIBRARY_PATH and calls supolicy_wrapped
#
# 22+   ARCH/sukernel                 /su/bin/sukernel                    0755    u:object_r:system_file:s0   required
#
# These files are automatically created on launch by daemonsu as needed:
# 22+   /system/bin/sh                /su/bin/sush                        0755    u:object_r:system_file:s0   required
# 22+   /system/bin/app_process[64]   /su/bin/app_process                 0755    u:object_r:system_file:s0   required
#
# These files are injected into the boot image ramdisk:
# 22+   common/launch_daemonsu.sh     /sbin/launch_daemonsu.sh            0700    u:object_r:rootfs:s0        required
#
# On devices where / is in the system partition:
# 22+   ARCH/suinit                   /init                               0750    u:object_r:rootfs:s0        required
#
# The automated boot image patcher included makes the following modifications
# to the ramdisk:
#
# - Uses the supolicy tool to patch the sepolicy file
# - Injects /sbin/launch_daemon.sh
# - Creates /su
# - Removes /verity_key
# - Patches /*fstab*
# --- Removes support_scfs and verify flags
# --- Changes forceencrypt/forcefdeorfbe into encryptable
# --- Set ro mounts to use noatime
# - Patches /init.rc
# --- Removes 'setprop selinux.reload_policy' occurences
# --- Adds a SuperSU:PATCH marker with the version of the sukernel tool
# --- Adds a SuperSU:STOCK marker listed the SHA1 of the original boot image
# - Adds /init.supersu.rc
# --- Adds a sukernel.mount property trigger that mounts /data/su.img to /su
# --- Adds the daemonsu service that launches /sbin/launch_daemon.sh
# --- Adds exec /sbin/launch_daemonsu.sh on post-fs-data
# - Patches /init.environ.rc
# --- Adds PATH variable if it does not exist
# --- Prepends /su/bin to the PATH variable
# - Patches /*.rc
# --- Adds a seclabel to services and execs that are missing one
# - In case the device has the root directory inside the system partition:
# --- /system_root contents are copied to /boot
# --- All files mentioned above are modified in /boot instead of /
# --- /boot/*fstab* is modified to mount / to /system_root, and
#     bind-mount /system to /system_root/system
# --- Kernel binary is patched to load from initramfs instead of system
#
# In case this documentation becomes outdated, please note that the sukernel
# tool is very chatty, and its output tells you exactly what it is doing
# and how. In TWRP, you can view this output by catting /tmp/recovery.log
# after flashing the ZIP.
#
# The boot image patcher creates a backup of the boot image it patches, for
# future restoration. It cannot re-patch a patched boot image, it will restore
# the previous boot image first. /[data|cache]/stock_boot_*.gz
#
# The boot image patcher currently only supports GZIP compressed ramdisks, and
# boot images in the standard Android boot image format.
#
# During boot image patch, /data/custom_ramdisk_patch.sh will be called,
# with the name of the ramdisk cpio file as parameter. The script must
# replace the input file and return a 0 exit code.
#
# Just before flashing, the boot image patcher will call
# /data/custom_boot_image_patch.sh with the name of the patched boot image
# as parameter. A device-specific patcher can further patch the boot image
# if needed. It must replace the input file and return a 0 exit code.
#
# Modified to for AsusStockApps.sh for RR Z00L
#

# remount system as read-write
remount_system_rw() {
	$LT2 "remount_rw"
	if (! is_mounted /system rw); then mount -o rw,remount /system; fi
	if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi
	if (! is_mounted /system rw); then toolbox_mount /system; fi
}

# check_zero "progress_message" "success message" "failure message" "command"
check_zero() {
	$LT2 "check_zero $1, $2, $3, $*"
	if ($CONTINUE); then
		if [ ! -z "$1" ]; then ui_print "$1"; fi
		eval "$4"
		if [ $? -eq 0 ]; then
		  if [ ! -z "$2" ]; then ui_print "$2"; fi
		else
		  if [ ! -z "$3" ]; then
			if [ ! -z "$1" ]; then
			  ui_print_less "$1"
			else
			  ui_print_less "$UI_PRINT_LAST"
			fi
			ui_print_always "$3";
		  fi
		  CONTINUE=false
		fi
	fi
}

# check_zero_def "progress message" "command"
check_zero_def() {
  check_zero "$1" "" "--- Failure, aborting" "$2"
}

# find boot image partition if not set already
find_boot_image() {
	$LT2 "find_boot_image"
  # expand the detection if we find more, instead of reading from fstab, because unroot
  # from the SuperSU APK doesn't have the fstab to read from
  if [ -z "$BOOTIMAGE" ]; then
    for PARTITION in kern-a KERN-A android_boot ANDROID_BOOT kernel KERNEL boot BOOT lnx LNX; do
      BOOTIMAGE=$(readlink /dev/block/by-name/$PARTITION || readlink /dev/block/platform/*/by-name/$PARTITION || readlink /dev/block/platform/*/*/by-name/$PARTITION || readlink /dev/block/by-name/$PARTITION$SLOT_SUFFIX || readlink /dev/block/platform/*/by-name/$PARTITION$SLOT_SUFFIX || readlink /dev/block/platform/*/*/by-name/$PARTITION$SLOT_SUFFIX)
      if [ ! -z "$BOOTIMAGE" ]; then break; fi
    done
  fi

  # if we found nothing, try the recovery.fstab (TWRP), and hope named partitions are actually
  # available from Android for APK unroot; this is know to occur, suspected to be a TWRP bug
  if [ -z "$BOOTIMAGE" ]; then
    BOOTIMAGE=$(cat /etc/recovery.fstab | grep -v "#" | grep -m 1 "^/boot" | tr -s " " | cut -f 3 -d " " | grep "/dev/block")
  fi
}

# use only on 6.0+, tries to read current boot image and detect if we can do a system install
# without any boot image patching. Requirements:
# - /data readable
# - not pre-patched by SuperSU
# - dm-verity disabled
# - init loads from /data/security/current/sepolicy
# - sepolicy has init load_policy or permissive init
# It symlink/patches the relevant files to /data, and sets SYSTEMLESS variable if not already set
detect_systemless_required() {
  $LT2 "detect_systemless_required"
  OLD_SYSTEMLESS=$SYSTEMLESS
  if [ "$OLD_SYSTEMLESS" = "detect" ]; then
    # we don't override a pre-set true/false value
    SYSTEMLESS=true
  fi

  # check /data mounted
  if (! is_mounted /data); then
    return
  fi

  # find boot image partition
  find_boot_image

  CONTINUE=true
  if [ -z "$BOOTIMAGE" ]; then
    # no boot image partition detected, abort
    return
  fi

  # extract ramdisk from boot image
  rm -rf /sutmp
  mkdir /sutmp

  check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --bootimg-extract-ramdisk $BOOTIMAGE /sutmp/ramdisk.packed"
  check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --ungzip /sutmp/ramdisk.packed /sutmp/ramdisk"
  if (! $CONTINUE); then return; fi

  # detect SuperSU patch
  LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --patch-test /sutmp/ramdisk
  if [ $? -ne 0 ]; then
    return
  fi

  # detect dm-verity in use
  if (! $SYSTEM_ROOT_USED); then
    for i in `LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --cpio-ls /sutmp/ramdisk | grep fstab`; do
      rm -f /sutmp/fstab

      check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --cpio-extract /sutmp/ramdisk $i /sutmp/fstab"
      if (! $CONTINUE); then return; fi

      VERIFY=$(cat /sutmp/fstab | grep verify | grep system)
      if [ $? -eq 0 ]; then
        # verify flag found, dm-verity probably enabled, modifying /system may prevent boot
        return
      fi
    done
  else
    for i in `ls /system_root | grep fstab`; do
      VERIFY=$(cat /system_root/$i | grep verify | grep system)
      if [ $? -eq 0 ]; then
        # verify flag found, dm-verity probably enabled, modifying /system may prevent boot
        return
      fi
    done
  fi

  # detect init loading from /data/security/current/sepolicy
  if (! $SYSTEM_ROOT_USED); then
    check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --cpio-extract /sutmp/ramdisk ${CPIO_PREFIX}init /sutmp/init"
    if (! $CONTINUE); then return; fi
  else
    cat /system_root/init > /sutmp/init
  fi

  if (cat /sutmp/init 2>/dev/null | grep "/data/security/current/sepolicy" >/dev/null); then
    # this init doesn't load from the default sepolicy override location
    return
  fi

  if (cat /sutmp/init 2>/dev/null | grep "selinux.reload_policy" >/dev/null); then
    # this init doesn't react to setprop selinux.reload_policy
    return
  fi

  # detect selinux.reload_policy being set
  if (! $SYSTEM_ROOT_USED); then
    check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --cpio-extract /sutmp/ramdisk ${CPIO_PREFIX}init.rc /sutmp/init.rc"
    if (! $CONTINUE); then return; fi
  else
    cat /system_root/init.rc > /sutmp/init.rc
  fi

  if (cat /sutmp/init.rc 2>/dev/null | grep "setprop selinux.reload_policy 1" >/dev/null); then
    # this init.rc doesn't setprop selinux.reload_policy 1
    return
  fi

  # extract sepolicy
  if (! $SYSTEM_ROOT_USED); then
    check_zero "" "" "" "LD_LIBRARY_PATH=$RAMDISKLIB $BIN/sukernel --cpio-extract /sutmp/ramdisk ${CPIO_PREFIX}sepolicy /sutmp/sepolicy"
    if (! $CONTINUE); then return; fi
  else
    cat /system_root/sepolicy > /sutmp/sepolicy
  fi

  GO=false

  # detect init permissive
  if (! $GO); then
    INIT_PERMISSIVE=$(LD_LIBRARY_PATH=$RAMDISKLIB $BIN/supolicy --dumpav /sutmp/sepolicy | grep "[TYPE]" | grep " init (PERMISSIVE) ")
    if [ $? -eq 0 ]; then
      GO=true
    fi
  fi

  # detect init load_policy
  if (! $GO); then
    INIT_LOAD_POLICY=$(LD_LIBRARY_PATH=$RAMDISKLIB $BIN/supolicy --dumpav /sutmp/sepolicy | grep "[AV]" | grep " ALLOW " | grep " init-->kernel (security) " | grep "load_policy")
    if [ $? -eq 0 ]; then
      GO=true
    fi
  fi

  # copy files to /data
  if (! $GO); then return; fi

  rm -rf /data/security/*
  mkdir /data/security/current
  set_perm 1000 1000 0755 /data/security/current u:object_r:security_file:s0

  LD_LIBRARY_PATH=$RAMDISKLIB $BIN/supolicy --file /sutmp/sepolicy /data/security/current/sepolicy --sdk=$API
  set_perm 1000 1000 0644 /data/security/current/sepolicy u:object_r:security_file:s0

  for i in seapp_contexts file_contexts file_contexts.bin property_contexts service_contexts selinux_version; do
    ln -s /$i /data/security/current/$i
  done

  ln -s /system/etc/security/mac_permissions.xml /data/security/current/mac_permissions.xml

  # if we reach this point, we can do a system install
  if [ "$OLD_SYSTEMLESS" = "detect" ]; then
    # we don't override a pre-set true/false value
    SYSTEMLESS=false
  fi
}

# used to copy aslib to data
aslib_survival(){
	$LT2 "ASLib Survival Script"
	# mount data
	remount_mountpoint /data rw
	# create directory
	if [ ! -e /data/ASLib ];then
		$LT3 "creating ASLib dir in data"
		mkdir /data/ASLib 2&>1 | $LT4
	fi
	# copy all ASLib files to /data/ASLib
	$LT3 "copying ASLib files in $LIBS to data"
	for LIB in `ls $LIBS | grep ASLib*`;do
		cp $LIBS/$LIB /data/ASLib/$LIB
		if [ -e /data/ASLib/$LIB ];then
			$LT3 "copied $LIB succesfully"
		else
			$LT3 "ERROR failed to copy $LIB"
		fi
	done
}

# install file
# note.this will inflate file from zip to a specified directory
installfile(){
	$LT2 "Install $*"
	local STATUS=true
	#verify ZIP is defined
	if [ -z "$ZIP" ];then
		$LT3 "warning ZIP is not defined"
		if [ -e "$3" ];then
			$LT3 "ZIP defined at $3"
			ZIP=$3
			STATUS=true
		else
			$LT3 "ERROR unknown zip location"
		fi
	fi
	if ($STATUS);then
		unzip -o "$ZIP" "$1" -d "$2"
	fi
}

# Init Functions
init_logMsg

